#pragma checksum "C:\Users\dku04\Source\Repos\Chatroom\Views\Home\Privacy.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f51f52c6d15631f48abf6e437417a3670be277c1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Privacy), @"mvc.1.0.view", @"/Views/Home/Privacy.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\dku04\Source\Repos\Chatroom\Views\_ViewImports.cshtml"
using Chatroom;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\dku04\Source\Repos\Chatroom\Views\_ViewImports.cshtml"
using Chatroom.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f51f52c6d15631f48abf6e437417a3670be277c1", @"/Views/Home/Privacy.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bded9a322f8fd938cb56cd6511d078b498b67e72", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Privacy : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\dku04\Source\Repos\Chatroom\Views\Home\Privacy.cshtml"
  
    ViewData["Title"] = "Privacy Policy";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
            WriteLiteral(@"<script type=""text/javascript"">

   



    //傳統使用setTimeout進行
//    const delay = (s) => {
//  return new Promise(resolve => {
//    setTimeout(resolve,s);
//  });
//};

//delay().then(() => {
//  console.log(1);     // 顯示 1
//  return delay(1000); // 延遲ㄧ秒
//}).then(() => {
//  console.log(2);     // 顯示 2
//  return delay(2000); // 延遲二秒
//}).then(() => {
//  console.log(3);     // 顯示 3
//});


    //使用async的寫法
    ~async function(){           // ~ 開頭表示直接執行這個 function，結尾有 ()
        const delay = (s) => {
            return new Promise(function (resolve) {  // 回傳一個 promise
                setTimeout(resolve, s);               // 等待多少秒之後 resolve()
            });
        };

        console.log(1);      // 顯示 1
        await delay(1000);   // 延遲ㄧ秒
        console.log(2);      // 顯示 2
        await delay(2000);   // 延遲二秒
        console.log(3);      // 顯示 3
    }();

    //下面的程式碼執行之後，並「不會」如我們預期的「先顯示 1，
    //再顯示 haha0...haha5，最後再顯示 2」，而是「先顯示 1 和 2，
    //然後再出現 haha0...ha");
            WriteLiteral(@"ha5」，因為雖然程式邏輯是從上往下，
    //但在 count function 裏頭是非同步的語法，導致自己走自己的路，也造成了結果的不如預期。
    //const count = (t, s) => {
    //    let a = 0;
    //    let timer = setInterval(() => {
    //        console.log(`${t}${a}`);
    //        a = a + 1;
    //        if (a > 5) {
    //            clearInterval(timer);
    //        }
    //    }, s);
    //};

    //console.log(1);
    //count('haha', 100);
    //console.log(2);

    //這時我們可以透過 async、await 和 promise 進行修正，在顯示 1 之後，會「等待」count function 結束後再顯示 2
    //~async function () {
    //    const count = (t, s) => {
    //        return new Promise(resolve => {
    //            let a = 0;
    //            let timer = setInterval(() => {
    //                console.log(`${t}${a}`);
    //                a = a + 1;
    //                if (a > 5) {
    //                    clearInterval(timer);
    //                    resolve();  // 表示完成
    //                }
    //            }, s);
    //        });
    //    };

    //    consol");
            WriteLiteral(@"e.log(1);
    //    await count('haha', 100);
    //    console.log(2);
    //}();




    //~async function () {
    //    const input = () => {
    //        return new Promise(resolve => {
    //            const btnClick = () => {
    //                h.insertAdjacentHTML('beforeend', a.value + '<br/>');   // 輸入後在 h1 裡添加內容
    //                a.value = '';   // 清空輸入框
    //                a.focus();      // 將焦點移至輸入框
    //                b.removeEventListener('click', btnClick);  // removeEventListener 避免重複綁定事件
    //                resolve();      // 完成
    //            };
    //            b.addEventListener('click', btnClick); // 綁定按鈕事件
    //        });
    //    };
    //    h.insertAdjacentHTML('beforeend', '開始<br/>');
    //    await input();     //  等待輸入，輸入後才會進行下一步
    //    await input();
    //    await input();
    //    h.insertAdjacentHTML('beforeend', '結束');
    //}();



</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
