#pragma checksum "C:\Users\dku04\Source\Repos\WebComputer\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "15832b0cf358920bf8ee314c3cfb0a0fa3d9ac0d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\dku04\Source\Repos\WebComputer\Views\_ViewImports.cshtml"
using WebComputer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\dku04\Source\Repos\WebComputer\Views\_ViewImports.cshtml"
using WebComputer.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"15832b0cf358920bf8ee314c3cfb0a0fa3d9ac0d", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e3365dfed5d50a874aab3bf3b3ef87b5a114af74", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\dku04\Source\Repos\WebComputer\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    <div class=""container"">
        <div class=""row justify-content-center"""">            
            <div class=""col-6"" style=""border:groove;border-bottom-color:black;border-bottom-width:1px"">
                <input type=""text"" id=""Trigger"" name=""master"" value="""" style=""width:100%;text-align: right""  readonly=""readonly"" />

                <div class=""row justify-content-center"">
                    <div class=""col-6"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnClear"" style=""width:100%""  onclick=""Clear()"">CE</button>
                    </div>                  
                </div>
                <div class=""row"">
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn7"" style=""width:100%"" value=""7"" onclick=""GetValue(this.value)"">7</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn b");
            WriteLiteral(@"tn-outline-dark"" id=""btn8"" style=""width:100%"" value=""8"" onclick=""GetValue(this.value)"">8</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn9"" style=""width:100%"" value=""9"" onclick=""GetValue(this.value)"">9</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnAdd"" style=""width:100%"" onclick=""FuncAlgorithm('Add')"">+</button>
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn4"" style=""width:100%"" value=""4"" onclick=""GetValue(this.value)"">4</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn5"" style=""width:1");
            WriteLiteral(@"00%"" value=""5"" onclick=""GetValue(this.value)"">5</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn6"" style=""width:100%"" value=""6"" onclick=""GetValue(this.value)"">6</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnLess"" style=""width:100%"" onclick=""FuncAlgorithm('Less')"">-</button>
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn1"" style=""width:100%"" value=""1"" onclick=""GetValue(this.value)"">1</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn2"" style=""width:100%"" value=""2"" onclick=""GetValue(this.v");
            WriteLiteral(@"alue)"">2</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn3"" style=""width:100%"" value=""3"" onclick=""GetValue(this.value)"">3</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnMultiply"" style=""width:100%"" onclick=""FuncAlgorithm('Multiply')"">*</button>
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn"" style=""width:100%"" onclick=""FuncEqual()"">=</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btn0"" style=""width:100%"" value=""0"" onclick=""GetValue(this.value)"">0</button>
                    </div>
    ");
            WriteLiteral(@"                <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnComma"" style=""width:100%""  onclick=""GetValue('.')"">.</button>
                    </div>
                    <div class=""col-3"" style=""padding:5px"">
                        <button class="" btn btn-outline-dark"" id=""btnExcept"" style=""width:100%"" onclick=""FuncAlgorithm('Except')"">/</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>     
        var showNumber = document.getElementById(""Trigger"");
        var strBeforeValue = """";
        var strScratchpad = """";
        var algorithm = """";
       
        //清空
        function Clear() {
            strBeforeValue = """";
            strScratchpad = """";
            algorithm = """";
            showNumber.value = """";     
        }
        //取得點擊的數值
        function GetValue(number)
        {
            //檢查是否輸入過小數點惹 要報錯!
            if (strBeforeValu");
            WriteLiteral(@"e.indexOf('.') >= 0 && number=='.') {
                return;
            }
            if (strBeforeValue != """" ) {
                strBeforeValue = strBeforeValue + number;
            } else {
                strBeforeValue = number;
            }
            showNumber.value = strBeforeValue;         
        }       
        //給予算法
        function FuncAlgorithm(faceAlgorithm) {

            strScratchpad = strBeforeValue;
            strBeforeValue = """";
            algorithm = faceAlgorithm;
        }
        //等於
        function FuncEqual() {              
            switch (algorithm) {
                case 'Add':
                    strScratchpad=parseFloat(strScratchpad) + parseFloat(strBeforeValue);
                   
                    break;
                case 'Less':
                    strScratchpad = parseFloat(strScratchpad) - parseFloat(strBeforeValue);
                    break;
                case 'Multiply':
                    strScratchpad = parseFloa");
            WriteLiteral(@"t(strScratchpad) * parseFloat(strBeforeValue);
                    break;
                case 'Except':
                    strScratchpad = parseFloat(strScratchpad) / parseFloat(strBeforeValue);
                    break;
                default:
                    alert('找不到你輸入的算法!');
            }

            showNumber.value = strScratchpad;
        }    
    </script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
